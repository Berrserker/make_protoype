{
	// Place your snippets for go here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"context.Context": {
		"prefix": "ctx.Ct",
		"body": [
			"context.Context",
		],
		"description": "ctx main"
	},
	"context.Bg": {
		"prefix": "ctx.Bg",
		"body": [
			"context.Background()",
		],
		"description": "ctx bg"
	},
	"context.Cc": {
		"prefix": "ctx.Cc",
		"body": [
			"context.WithCancel($1)",
		],
		"description": "ctx cancel"
	},
	"context.T": {
		"prefix": "ctx.T",
		"body": [
			"context.WithTimeout($1, $2)",
		],
		"description": "ctx timeout"
	},
	"func": {
		"prefix": "func",
		"body": [
			"func $1($2) ($3, error}) {",
			" ",
			" return $3, nil",
			"}"
		]
	},
	"For range loop": {
		"prefix": "forr",
		"body": [
			"for ${1:key}, ${2:value} := range ${3} {",
			" ",
			"}"
		],
		"description": "For range loop"
	},
	"If error": {
		"prefix": "if!",
		"body": [
			"if err != nil {",
			"return err ",
			"}"
		],
		"description": "If error"
	},
	"Indexed for loop": {
		"prefix": "fori",
		"body": [
			"for ${1} := 0; ${1} \u003c ${2}; ${1}++ {",
			" ",
			"}"
		],
		"description": "Indexed for loop"
	},
	"Method": {
		"prefix": "meth",
		"body": [
			"func (${1} *${2}) ${3}($4) (${2}, error) {",
			" ",
			" return ${2}, nil",
			"}"
		],
		"description": "Method"
	},
	"Types declaration": {
		"prefix": "ifc",
		"body": [
			"type $1 interface (",
			" ",
			")",
			""
		],
		"description": "Types declaration"
	},
	"Variable declaration :=": {
		"prefix": ":",
		"body": [
			"${1} := $2"
		],
		"description": "Variable declaration :="
	},
	"append": {
		"prefix": "ap",
		"body": [
			"$1 = append($1, $2)"
		],
		"description": "append"
	},
	"context.*": {
		"prefix": "ctx",
		"body": [
			"context.${1}"
		],
		"description": "context.*"
	},
	"context.WithTimeout": {
		"prefix": "ctxC",
		"body": [
			"${1}, ${1}Cancel := context.WithCancel(${2})",
			"defer ${1}Cancel()",
			""
		],
		"description": "context.WithTimeout"
	},
	"errors.wrap": {
		"prefix": "wrap",
		"body": [
			" errors.Wrap(${1}, \"$2\")"
		],
		"description": "errors.wrap"
	},
	"if": {
		"prefix": "if",
		"body": [
			"if $1 == nil {",
			" ",
			"}"
		],
		"description": "if"
	},
	"if err return wraped": {
		"prefix": "errr",
		"body": [
			"if ${1} != nil {",
			" return $2errors.Wrap(${1}, \"$3\")",
			"}"
		],
		"description": "if err return wraped"
	},
	"json tag from field name": {
		"prefix": "jsonc",
		"body": [
			"'json:\"$1\"'"
		],
		"description": "json tag from field name"
	},
	"lorep ipsum": {
		"prefix": "lop",
		"body": [
			"\"lorem ipsum\""
		],
		"description": "lorep ipsum"
	},
	"make map": {
		"prefix": "mkm",
		"body": [
			"make(map[$1]$2, ${3}, ${4})"
		],
		"description": "make map"
	},
	"make slice": {
		"prefix": "mks",
		"body": [
			"make([]$1, ${2}, ${3})"
		],
		"description": "make slice"
	},
	"printf": {
		"prefix": "printf",
		"body": [
			"log.Printf(\"\",$1)"
		],
		"description": "printf"
	},
	"select": {
		"prefix": "slc",
		"body": [
			"select {",
			"    case ${1}:",
			"    case ${2}:",
			"    case ${3}.Done():",
			"    default:",
			"}"
		],
		"description": "select"
	},
	"struct": {
		"prefix": "st",
		"body": [
			"type ${1} struct {",
			"    ",
			"}"
		],
		"description": "struct"
	},
	"switch": {
		"prefix": "sw",
		"body": [
			"switch ${1} {",
			"    case $2:",
			"    case $3:",
			"    default:",
			"        ",
			"}"
		],
		"description": "switch"
	}
}
